// Code generated by goa v3.8.1, DO NOT EDIT.
//
// chatter service
//
// Command:
// $ goa gen github.com/sevein/oneof/design -o .

package chatter

import (
	"context"

	chatterviews "github.com/sevein/oneof/gen/chatter/views"
)

// The chatter service implements a simple client and server chat.
type Service interface {
	// Subscribe to events sent when new chat messages are added.
	Subscribe(context.Context, SubscribeServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "chatter"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"subscribe"}

// SubscribeServerStream is the interface a "subscribe" endpoint server stream
// must satisfy.
type SubscribeServerStream interface {
	// Send streams instances of "OneofEvent".
	Send(*OneofEvent) error
	// Close closes the stream.
	Close() error
}

// SubscribeClientStream is the interface a "subscribe" endpoint client stream
// must satisfy.
type SubscribeClientStream interface {
	// Recv reads instances of "OneofEvent" from the stream.
	Recv() (*OneofEvent, error)
}

// OneofEvent is the result type of the chatter service subscribe method.
type OneofEvent struct {
	Payload interface {
		payloadVal()
	}
}

type OneofFoobarEvent struct {
	Message *string
	Item    *OneofStoredItem
}

type OneofPingEvent struct {
	Message *string
}

// StoredItem describes an item retrieved by the service.
type OneofStoredItem struct {
	// Identifier of item
	ID   uint
	Name string
}

func (*OneofFoobarEvent) payloadVal() {}
func (*OneofPingEvent) payloadVal()   {}

// NewOneofEvent initializes result type OneofEvent from viewed result type
// OneofEvent.
func NewOneofEvent(vres *chatterviews.OneofEvent) *OneofEvent {
	return newOneofEvent(vres.Projected)
}

// NewViewedOneofEvent initializes viewed result type OneofEvent from result
// type OneofEvent using the given view.
func NewViewedOneofEvent(res *OneofEvent, view string) *chatterviews.OneofEvent {
	p := newOneofEventView(res)
	return &chatterviews.OneofEvent{Projected: p, View: "default"}
}

// newOneofEvent converts projected type OneofEvent to service type OneofEvent.
func newOneofEvent(vres *chatterviews.OneofEventView) *OneofEvent {
	res := &OneofEvent{}
	if vres.Payload != nil {
		switch actual := vres.Payload.(type) {
		case *chatterviews.OneofPingEventView:
			res.Payload = &OneofPingEvent{
				Message: actual.Message,
			}

		case *chatterviews.OneofFoobarEventView:
			res.Payload = &OneofFoobarEvent{
				Message: actual.Message,
			}
			if actual.Item != nil {
				res.Payload.Item = transformChatterviewsOneofStoredItemViewToOneofStoredItem(actual.Item)
			}

		}
	}
	return res
}

// newOneofEventView projects result type OneofEvent to projected type
// OneofEventView using the "default" view.
func newOneofEventView(res *OneofEvent) *chatterviews.OneofEventView {
	vres := &chatterviews.OneofEventView{}
	if res.Payload != nil {
		switch actual := res.Payload.(type) {
		case *OneofPingEvent:
			vres.Payload = &chatterviews.OneofPingEventView{
				Message: actual.Message,
			}

		case *OneofFoobarEvent:
			vres.Payload = &chatterviews.OneofFoobarEventView{
				Message: actual.Message,
			}
			if actual.Item != nil {
				vres.Payload.Item = transformOneofStoredItemToChatterviewsOneofStoredItemView(actual.Item)
			}

		}
	}
	return vres
}

// newOneofPingEvent converts projected type OneofPingEvent to service type
// OneofPingEvent.
func newOneofPingEvent(vres *chatterviews.OneofPingEventView) *OneofPingEvent {
	res := &OneofPingEvent{
		Message: vres.Message,
	}
	return res
}

// newOneofPingEventView projects result type OneofPingEvent to projected type
// OneofPingEventView using the "default" view.
func newOneofPingEventView(res *OneofPingEvent) *chatterviews.OneofPingEventView {
	vres := &chatterviews.OneofPingEventView{
		Message: res.Message,
	}
	return vres
}

// newOneofFoobarEvent converts projected type OneofFoobarEvent to service type
// OneofFoobarEvent.
func newOneofFoobarEvent(vres *chatterviews.OneofFoobarEventView) *OneofFoobarEvent {
	res := &OneofFoobarEvent{
		Message: vres.Message,
	}
	if vres.Item != nil {
		res.Item = newOneofStoredItem(vres.Item)
	}
	return res
}

// newOneofFoobarEventView projects result type OneofFoobarEvent to projected
// type OneofFoobarEventView using the "default" view.
func newOneofFoobarEventView(res *OneofFoobarEvent) *chatterviews.OneofFoobarEventView {
	vres := &chatterviews.OneofFoobarEventView{
		Message: res.Message,
	}
	if res.Item != nil {
		vres.Item = newOneofStoredItemView(res.Item)
	}
	return vres
}

// newOneofStoredItem converts projected type OneofStoredItem to service type
// OneofStoredItem.
func newOneofStoredItem(vres *chatterviews.OneofStoredItemView) *OneofStoredItem {
	res := &OneofStoredItem{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newOneofStoredItemView projects result type OneofStoredItem to projected
// type OneofStoredItemView using the "default" view.
func newOneofStoredItemView(res *OneofStoredItem) *chatterviews.OneofStoredItemView {
	vres := &chatterviews.OneofStoredItemView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// transformChatterviewsOneofPingEventViewToOneofPingEvent builds a value of
// type *OneofPingEvent from a value of type *chatterviews.OneofPingEventView.
func transformChatterviewsOneofPingEventViewToOneofPingEvent(v *chatterviews.OneofPingEventView) *OneofPingEvent {
	if v == nil {
		return nil
	}
	res := &OneofPingEvent{
		Message: v.Message,
	}

	return res
}

// transformChatterviewsOneofFoobarEventViewToOneofFoobarEvent builds a value
// of type *OneofFoobarEvent from a value of type
// *chatterviews.OneofFoobarEventView.
func transformChatterviewsOneofFoobarEventViewToOneofFoobarEvent(v *chatterviews.OneofFoobarEventView) *OneofFoobarEvent {
	if v == nil {
		return nil
	}
	res := &OneofFoobarEvent{
		Message: v.Message,
	}
	if v.Item != nil {
		res.Item = transformChatterviewsOneofStoredItemViewToOneofStoredItem(v.Item)
	}

	return res
}

// transformChatterviewsOneofStoredItemViewToOneofStoredItem builds a value of
// type *OneofStoredItem from a value of type *chatterviews.OneofStoredItemView.
func transformChatterviewsOneofStoredItemViewToOneofStoredItem(v *chatterviews.OneofStoredItemView) *OneofStoredItem {
	if v == nil {
		return nil
	}
	res := &OneofStoredItem{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// transformOneofPingEventToChatterviewsOneofPingEventView builds a value of
// type *chatterviews.OneofPingEventView from a value of type *OneofPingEvent.
func transformOneofPingEventToChatterviewsOneofPingEventView(v *OneofPingEvent) *chatterviews.OneofPingEventView {
	if v == nil {
		return nil
	}
	res := &chatterviews.OneofPingEventView{
		Message: v.Message,
	}

	return res
}

// transformOneofFoobarEventToChatterviewsOneofFoobarEventView builds a value
// of type *chatterviews.OneofFoobarEventView from a value of type
// *OneofFoobarEvent.
func transformOneofFoobarEventToChatterviewsOneofFoobarEventView(v *OneofFoobarEvent) *chatterviews.OneofFoobarEventView {
	if v == nil {
		return nil
	}
	res := &chatterviews.OneofFoobarEventView{
		Message: v.Message,
	}
	if v.Item != nil {
		res.Item = transformOneofStoredItemToChatterviewsOneofStoredItemView(v.Item)
	}

	return res
}

// transformOneofStoredItemToChatterviewsOneofStoredItemView builds a value of
// type *chatterviews.OneofStoredItemView from a value of type *OneofStoredItem.
func transformOneofStoredItemToChatterviewsOneofStoredItemView(v *OneofStoredItem) *chatterviews.OneofStoredItemView {
	if v == nil {
		return nil
	}
	res := &chatterviews.OneofStoredItemView{
		ID:   &v.ID,
		Name: &v.Name,
	}

	return res
}
