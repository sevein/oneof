// Code generated by goa v3.8.1, DO NOT EDIT.
//
// chatter views
//
// Command:
// $ goa gen github.com/sevein/oneof/design -o .

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// OneofEvent is the viewed result type that is projected based on a view.
type OneofEvent struct {
	// Type to project
	Projected *OneofEventView
	// View to render
	View string
}

// OneofEventView is a type that runs validations on a projected type.
type OneofEventView struct {
	Payload interface {
		payloadVal()
	}
}

// OneofPingEventView is a type that runs validations on a projected type.
type OneofPingEventView struct {
	Message *string
}

// OneofFoobarEventView is a type that runs validations on a projected type.
type OneofFoobarEventView struct {
	Message *string
	Item    *OneofStoredItemView
}

// OneofStoredItemView is a type that runs validations on a projected type.
type OneofStoredItemView struct {
	// Identifier of item
	ID   *uint
	Name *string
}

func (*OneofPingEventView) payloadVal()   {}
func (*OneofFoobarEventView) payloadVal() {}

var (
	// OneofEventMap is a map indexing the attribute names of OneofEvent by view
	// name.
	OneofEventMap = map[string][]string{
		"default": {
			"payload",
		},
	}
	// OneofPingEventMap is a map indexing the attribute names of OneofPingEvent by
	// view name.
	OneofPingEventMap = map[string][]string{
		"default": {
			"message",
		},
	}
	// OneofFoobarEventMap is a map indexing the attribute names of
	// OneofFoobarEvent by view name.
	OneofFoobarEventMap = map[string][]string{
		"default": {
			"message",
			"item",
		},
	}
	// OneofStoredItemMap is a map indexing the attribute names of OneofStoredItem
	// by view name.
	OneofStoredItemMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
	}
)

// ValidateOneofEvent runs the validations defined on the viewed result type
// OneofEvent.
func ValidateOneofEvent(result *OneofEvent) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateOneofEventView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateOneofEventView runs the validations defined on OneofEventView using
// the "default" view.
func ValidateOneofEventView(result *OneofEventView) (err error) {

	return
}

// ValidateOneofPingEventView runs the validations defined on
// OneofPingEventView using the "default" view.
func ValidateOneofPingEventView(result *OneofPingEventView) (err error) {

	return
}

// ValidateOneofFoobarEventView runs the validations defined on
// OneofFoobarEventView using the "default" view.
func ValidateOneofFoobarEventView(result *OneofFoobarEventView) (err error) {

	if result.Item != nil {
		if err2 := ValidateOneofStoredItemView(result.Item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOneofStoredItemView runs the validations defined on
// OneofStoredItemView using the "default" view.
func ValidateOneofStoredItemView(result *OneofStoredItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
