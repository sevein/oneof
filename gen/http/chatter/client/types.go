// Code generated by goa v3.7.13, DO NOT EDIT.
//
// chatter HTTP client types
//
// Command:
// $ goa-v3.7.13 gen github.com/sevein/oneof/design -o .

package client

import (
	"encoding/json"

	chatterviews "github.com/sevein/oneof/gen/chatter/views"
)

// SubscribeResponseBody is the type of the "chatter" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody struct {
	Payload *struct {
		// Union type name, one of:
		// - "ping_event"
		// - "foobar_event"
		Type *string `form:"Type" json:"Type" xml:"Type"`
		// JSON formatted union value
		Value *string `form:"Value" json:"Value" xml:"Value"`
	} `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
}

// NewSubscribeOneofEventOK builds a "chatter" service "subscribe" endpoint
// result from a HTTP "OK" response.
func NewSubscribeOneofEventOK(body *SubscribeResponseBody) *chatterviews.OneofEventView {
	v := &chatterviews.OneofEventView{}
	if body.Payload != nil {
		switch *body.Payload.Type {
		case "ping_event":
			var val *chatterviews.OneofPingEvent
			json.Unmarshal([]byte(*body.Payload.Value), &val)
			v.Payload = val
		case "foobar_event":
			var val *chatterviews.OneofFoobarEvent
			json.Unmarshal([]byte(*body.Payload.Value), &val)
			v.Payload = val
		}
	}

	return v
}
